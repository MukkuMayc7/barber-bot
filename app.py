# app.py - FIXED VERSION WITH PROPER INITIALIZATION
import os
import asyncio
from aiohttp import web
import logging
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8297051179:AAGHxFTyY2ourq2qmORND-oBN5TaKVYM0uE"
WEBHOOK_URL = "https://barber-bot-render.onrender.com"
WEBHOOK_PATH = f"/{BOT_TOKEN}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_initialized = False
application = None
init_start_time = None

async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ - –°–ò–ù–•–†–û–ù–ù–ê–Ø —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫"""
    global bot_initialized, application, init_start_time
    
    init_start_time = time.time()
    logger.info("üöÄ STARTING BOT INITIALIZATION...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from telegram.ext import Application
        import database
        from bot import setup_handlers
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üì¶ Initializing database...")
        db = database.Database()
        logger.info("‚úÖ Database initialized")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        logger.info("ü§ñ Creating bot application...")
        application = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ Bot application created")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.info("‚öôÔ∏è Setting up handlers...")
        setup_handlers(application)
        logger.info("‚úÖ Bot handlers setup completed")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        logger.info("üåê Setting webhook...")
        await application.bot.set_webhook(
            f"{WEBHOOK_URL}{WEBHOOK_PATH}",
            drop_pending_updates=True
        )
        logger.info(f"‚úÖ Webhook set: {WEBHOOK_URL}{WEBHOOK_PATH}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        logger.info("‚è∞ Starting job queue...")
        from bot import setup_job_queue
        setup_job_queue(application)
        logger.info("‚úÖ Job queue started")
        
        bot_initialized = True
        init_time = time.time() - init_start_time
        logger.info(f"üéâ Bot fully initialized in {init_time:.2f} seconds!")
        
    except Exception as e:
        logger.error(f"üí• Bot initialization failed: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    global bot_initialized, application
    
    if not bot_initialized:
        logger.warning("‚è≥ Bot not initialized yet - returning 503")
        return web.Response(
            text="Bot initializing, please try again in a few seconds", 
            status=503
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        data = await request.json()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–æ—Ç–∞
        from telegram import Update
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        
        logger.info("‚úÖ Webhook processed successfully")
        return web.Response(text="OK")
        
    except Exception as e:
        logger.error(f"‚ùå Webhook processing error: {e}")
        return web.Response(text="Error", status=500)

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot_initialized, init_start_time
    
    status_info = {
        "status": "RUNNING" if bot_initialized else "INITIALIZING",
        "bot_initialized": bot_initialized
    }
    
    if init_start_time and not bot_initialized:
        init_time = time.time() - init_start_time
        status_info["initializing_for_seconds"] = f"{init_time:.1f}s"
    
    import json
    return web.Response(
        text=json.dumps(status_info, ensure_ascii=False),
        content_type='application/json'
    )

async def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –°–ò–ù–•–†–û–ù–ù–û
    logger.info("üéØ Starting bot initialization BEFORE server start...")
    await initialize_bot()
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get('PORT', 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"üöÄ Server started on port {port}")
    logger.info("üì± Bot is ready to receive webhooks!")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    await asyncio.Future()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.run(start_server())