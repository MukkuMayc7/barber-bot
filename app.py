# app.py - FIXED VERSION FOR RENDER
import os
import asyncio
from aiohttp import web
import logging
import traceback

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8297051179:AAGHxFTyY2ourq2qmORND-oBN5TaKVYM0uE"
WEBHOOK_URL = "https://barber-bot-render.onrender.com"
WEBHOOK_PATH = f"/{BOT_TOKEN}"

bot_initialized = False
application = None

async def initialize_bot():
    global bot_initialized, application
    try:
        logger.info("üöÄ STARTING BOT INITIALIZATION...")
        
        # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üì¶ Testing database...")
        import database
        db = database.Database()
        logger.info("‚úÖ Database OK")
        
        # 2. Telegram –±–æ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        logger.info("ü§ñ Testing Telegram bot...")
        from telegram.ext import Application
        application = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ Telegram bot created")
        
        # 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        logger.info("‚öôÔ∏è Initializing application...")
        await application.initialize()
        logger.info("‚úÖ Application initialized")
        
        # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.info("üõ†Ô∏è Setting up handlers...")
        from bot import setup_handlers
        setup_handlers(application)
        logger.info("‚úÖ Handlers setup OK")
        
        # 5. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üéØ Starting application...")
        await application.start()
        logger.info("‚úÖ Application started")
        
        # 6. –í–µ–±—Ö—É–∫
        logger.info("üåê Setting webhook...")
        await application.bot.set_webhook(
            url=f"{WEBHOOK_URL}{WEBHOOK_PATH}",
            drop_pending_updates=True
        )
        logger.info("‚úÖ Webhook set successfully")
        
        bot_initialized = True
        logger.info("üéâ Bot fully initialized!")
        
    except Exception as e:
        logger.error(f"üí• INITIALIZATION FAILED: {e}")
        logger.error(f"TRACEBACK: {traceback.format_exc()}")

async def handle_webhook(request):
    global bot_initialized, application
    if not bot_initialized:
        logger.warning("‚è≥ Bot not initialized yet")
        return web.Response(text="Bot initializing", status=503)
    
    try:
        data = await request.json()
        from telegram import Update
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        logger.info("‚úÖ Webhook processed")
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return web.Response(text="Error", status=500)

async def health_check(request):
    global bot_initialized
    status = "RUNNING" if bot_initialized else "INITIALIZING"
    return web.Response(text=f"Bot status: {status}")

async def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    asyncio.create_task(initialize_bot())
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
    port = int(os.environ.get('PORT', 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"üöÄ Server started on port {port}")
    logger.info("üì± Waiting for bot initialization...")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    await asyncio.Future()

if __name__ == '__main__':
    asyncio.run(main())