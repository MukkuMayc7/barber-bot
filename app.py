# app.py - SIMPLE WORKING VERSION
import os
import asyncio
from aiohttp import web
import logging
import aiohttp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –í–°–¢–ê–í–õ–Ø–ï–ú –ù–ê–ü–†–Ø–ú–£–Æ
BOT_TOKEN = "8297051179:AAGHxFTyY2ourq2qmORND-oBN5TaKVYM0uE"
WEBHOOK_URL = "https://barber-bot-render.onrender.com"
WEBHOOK_PATH = f"/{BOT_TOKEN}"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_initialized = False

async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ - –í–°–ï –í –û–î–ù–û–ô –§–£–ù–ö–¶–ò–ò"""
    global bot_initialized
    
    try:
        logger.info("üöÄ STARTING BOT INITIALIZATION...")
        
        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        setwebhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        webhook_data = {
            "url": f"{WEBHOOK_URL}{WEBHOOK_PATH}",
            "drop_pending_updates": True
        }
        
        logger.info(f"üîß Setting webhook to: {WEBHOOK_URL}{WEBHOOK_PATH}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(setwebhook_url, data=webhook_data) as response:
                result = await response.json()
                if result.get('ok'):
                    logger.info("‚úÖ WEBHOOK SET SUCCESSFULLY!")
                else:
                    logger.error(f"‚ùå WEBHOOK FAILED: {result}")
                    return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        getwebhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
        async with aiohttp.ClientSession() as session:
            async with session.get(getwebhook_url) as response:
                status = await response.json()
                logger.info(f"üîç WEBHOOK STATUS: {status}")
        
        bot_initialized = True
        logger.info("üéâ BOT INITIALIZATION COMPLETED!")
        return True
        
    except Exception as e:
        logger.error(f"üí• BOT INITIALIZATION FAILED: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    global bot_initialized
    
    if not bot_initialized:
        logger.warning("‚ö†Ô∏è Bot not initialized, but received webhook")
        return web.Response(text="Bot initializing", status=503)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        logger.info(f"üì® Received message")
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if 'message' in data and 'text' in data['message']:
            text = data['message']['text']
            chat_id = data['message']['chat']['id']
            
            response_text = "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
            if text == '/start':
                response_text = "üéâ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ /start"
            elif '–ø—Ä–∏–≤–µ—Ç' in text.lower():
                response_text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π '–ë–∞—Ä—Ö–∞—Ç'"
            else:
                response_text = f"ü§ñ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await send_telegram_message(chat_id, response_text)
        
        return web.Response(text="OK")
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return web.Response(text="Error", status=500)

async def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                result = await response.json()
                if result.get('ok'):
                    logger.info(f"‚úÖ Message sent to {chat_id}")
                else:
                    logger.error(f"‚ùå Failed to send message: {result}")
                    
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    status = "RUNNING" if bot_initialized else "INITIALIZING"
    return web.Response(text=f"Bot is {status}!")

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üåê INITIALIZING WEB APPLICATION...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –°–†–ê–ó–£ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await initialize_bot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    logger.info("‚úÖ WEB APPLICATION READY")
    return app

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    async def start_server():
        app = await init_app()
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        logger.info(f"üöÄ SERVER STARTED ON PORT {port}")
        logger.info("üéØ BOT IS READY FOR WEBHOOKS!")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    asyncio.run(start_server())