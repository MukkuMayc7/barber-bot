# app.py - FIXED VERSION FOR RENDER
import os
import asyncio
from aiohttp import web
import logging
import aiohttp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8297051179:AAGHxFTyY2ourq2qmORND-oBN5TaKVYM0uE"
WEBHOOK_URL = "https://barber-bot-render.onrender.com"
WEBHOOK_PATH = f"/{BOT_TOKEN}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_initialized = False
application = None

async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞"""
    global bot_initialized, application
    
    try:
        logger.info("üöÄ INITIALIZING FULL BOT FUNCTIONALITY...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from telegram.ext import Application
        from bot import setup_handlers
        import database
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = database.Database()
        logger.info("‚úÖ DATABASE INITIALIZED")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        application = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ BOT APPLICATION CREATED")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(application)
        logger.info("‚úÖ BOT HANDLERS SETUP COMPLETED")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
        await application.bot.set_webhook(webhook_url, drop_pending_updates=True)
        logger.info(f"‚úÖ WEBHOOK SET: {webhook_url}")
        
        bot_initialized = True
        logger.info("üéâ FULL BOT FUNCTIONALITY INITIALIZED!")
        return True
        
    except Exception as e:
        logger.error(f"üí• BOT INITIALIZATION FAILED: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    global bot_initialized, application
    
    if not bot_initialized or application is None:
        logger.warning("‚ö†Ô∏è Bot not fully initialized")
        return web.Response(text="Bot initializing", status=503)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        data = await request.json()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–æ—Ç–∞
        from telegram import Update
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        
        logger.info("‚úÖ WEBHOOK PROCESSED WITH FULL FUNCTIONALITY")
        return web.Response(text="OK")
        
    except Exception as e:
        logger.error(f"‚ùå Webhook processing error: {e}")
        return web.Response(text="Error", status=500)

async def health_check(request):
    status = "RUNNING" if bot_initialized else "INITIALIZING"
    return web.Response(text=f"Bot is {status}!")

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üåê INITIALIZING WEB APPLICATION...")
    
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    logger.info("‚úÖ WEB APPLICATION READY")
    return app

async def start_background_tasks(app):
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(initialize_bot())

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    async def main():
        app = await init_app()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        await start_background_tasks(app)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        
        logger.info(f"üöÄ SERVER STARTED ON PORT {port}")
        logger.info("üéØ BOT IS READY TO RECEIVE REQUESTS!")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        while True:
            await asyncio.sleep(3600)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())