# app.py
import os
import asyncio
from aiohttp import web
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
application = None

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±—Ö—É–∫–∞"""
    global application
    try:
        from telegram.ext import Application
        from bot import setup_handlers
        
        BOT_TOKEN = os.getenv('BOT_TOKEN', '8297051179:AAGHxFTyY2ourq2qmORND-oBN5TaKVYM0uE')
        WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://barber-bot-render.onrender.com')
        
        logger.info(f"üîß Initializing bot with token: {BOT_TOKEN[:10]}...")
        logger.info(f"üîß Webhook URL: {WEBHOOK_URL}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(application)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        await application.bot.set_webhook(webhook_url, drop_pending_updates=True)
        logger.info(f"‚úÖ Webhook set to: {webhook_url}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to setup bot: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    global application
    
    if application is None:
        logger.error("‚ùå Bot not initialized!")
        return web.Response(text="Bot not ready", status=503)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        data = await request.json()
        from telegram import Update
        update = Update.de_json(data, application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await application.process_update(update)
        logger.info("‚úÖ Webhook processed successfully")
        return web.Response(text="OK", status=200)
        
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}")
        return web.Response(text="Error", status=500)

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    status = "RUNNING" if application else "INITIALIZING"
    return web.Response(text=f"Bot is {status}!")

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üåê Initializing web application...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    await setup_bot()
    
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    BOT_TOKEN = os.getenv('BOT_TOKEN', '8297051179:AAGHxFTyY2ourq2qmORND-oBN5TaKVYM0uE')
    app.router.add_post(f'/{BOT_TOKEN}', handle_webhook)
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    logger.info("‚úÖ Web application ready")
    return app

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    async def start_server():
        app = await init_app()
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        logger.info(f"üöÄ Server started on port {port}")
        logger.info("üéØ Bot is ready to receive webhooks!")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)
    
    asyncio.run(start_server())