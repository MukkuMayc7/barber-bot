# bot.py
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler,
    JobQueue
)
from datetime import datetime, timedelta, timezone
import database
import config

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SERVICE, DATE, TIME, PHONE = range(4)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db = database.Database()

def get_local_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)"""
    utc_now = datetime.now(timezone.utc)
    moscow_time = utc_now + timedelta(hours=3)
    return moscow_time

def get_main_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    keyboard = []
    
    if db.is_admin(user_id):
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é")],
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
            [KeyboardButton("üëë –í—Å–µ –∑–∞–ø–∏—Å–∏"), KeyboardButton("üìä –ó–∞–ø–∏—Å–∏ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")],
            [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")]
        ]
    else:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [
            [KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É")],
            [KeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
            [KeyboardButton("‚ÑπÔ∏è –û –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π")]
        ]
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, is_persistent=True)

def get_phone_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True, one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    db.add_or_update_user(user.id, user.username, user.first_name, user.last_name)
    
    keyboard = get_main_keyboard(user.id)
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫—É—é *{config.BARBERSHOP_NAME}*, {user.first_name}!\n\n"
        "–Ø - –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:\n\n"
    )
    
    if db.is_admin(user.id):
        welcome_text += (
            "üìù *–ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é* - –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –ø—Ä–∏ –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ\n"
            "üìã *–ú–æ–∏ –∑–∞–ø–∏—Å–∏* - –∑–∞–ø–∏—Å–∏, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é\n"
            "‚ùå *–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å* - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
            "üëë *–í—Å–µ –∑–∞–ø–∏—Å–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π\n"
            "üìä *–ó–∞–ø–∏—Å–∏ —Å–µ–≥–æ–¥–Ω—è* - –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\n"
            "üóìÔ∏è *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã* - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"
        )
    else:
        welcome_text += (
            "üìÖ *–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É* - –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è\n"
            "üìã *–ú–æ–∏ –∑–∞–ø–∏—Å–∏* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏\n"
            "‚ùå *–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å* - –æ—Ç–º–µ–Ω–∏—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å\n"
            "‚ÑπÔ∏è *–û –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å"
        )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    db.add_or_update_user(user.id, user.username, user.first_name, user.last_name)
    
    if db.is_admin(user_id):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é":
            await make_appointment_start(update, context, is_admin=True)
        elif text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
            await show_admin_manual_appointments(update, context)
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
            await show_cancel_appointment(update, context)
        elif text == "üëë –í—Å–µ –∑–∞–ø–∏—Å–∏":
            await show_all_appointments(update, context)
        elif text == "üìä –ó–∞–ø–∏—Å–∏ —Å–µ–≥–æ–¥–Ω—è":
            await show_today_appointments(update, context)
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await show_statistics(update, context)
        elif text == "üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":
            await manage_schedule(update, context)
        elif text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏":
            await manage_admins(update, context)
        elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥" and context.user_data.get('awaiting_phone'):
            await date_selected_back(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                reply_markup=get_main_keyboard(user_id)
            )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É":
            await make_appointment_start(update, context, is_admin=False)
        elif text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
            await show_my_appointments(update, context)
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
            await show_cancel_appointment(update, context)
        elif text == "‚ÑπÔ∏è –û –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π":
            await about_barbershop(update, context)
        elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥" and context.user_data.get('awaiting_phone'):
            await date_selected_back(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞ation",
                reply_markup=get_main_keyboard(user_id)
            )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        await query.edit_message_text(
            f"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {config.BARBERSHOP_NAME}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:",
            parse_mode='Markdown'
        )
    else:
        user_id = update.effective_user.id
        await update.message.reply_text(
            f"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {config.BARBERSHOP_NAME}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:",
            reply_markup=get_main_keyboard(user_id),
            parse_mode='Markdown'
        )

async def about_barbershop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π"""
    text = (
        f"‚ÑπÔ∏è *–û –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π {config.BARBERSHOP_NAME}*\n\n"
        "‚úÇÔ∏è *–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*\n"
        "‚Ä¢ –ú—É–∂—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏\n"
        "‚Ä¢ –ñ–µ–Ω—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏\n\n"
        "üë©‚Äçüíº *–ú–∞—Å—Ç–µ—Ä:* –ù–∞–¥–µ–∂–¥–∞\n\n"
        "üìç *–ê–¥—Ä–µ—Å:*\n"
        "–≥. –ù–∏–∂–Ω–µ–∫–∞–º—Å–∫, —É–ª. –ö–æ—Ä–∞–±–µ–ª—å–Ω–∞—è –¥.29\n"
        "–≤—Ö–æ–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã 7 –ø–æ–¥—ä–µ–∑–¥–∞\n\n"
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
        "–ú–∞—Å—Ç–µ—Ä –ù–∞–¥–µ–∂–¥–∞: +79178766645\n\n"
        "üíª *–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ:*\n"
        "–•–æ—Ç–∏—Ç–µ —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?\n"
        "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å: –ê–π—Ä–∞—Ç +79274608748"
    )
    
    if update.callback_query:
        query = update.callback_query
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            text,
            reply_markup=get_main_keyboard(update.effective_user.id),
            parse_mode='Markdown'
        )

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = update.effective_user.id
    
    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    total_users = db.get_total_users_count()
    active_users = db.get_active_users_count(30)  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    
    text = (
        f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ {config.BARBERSHOP_NAME}*\n\n"
        f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
        f"üéØ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π:* {active_users}\n\n"
        "*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)

async def make_appointment_start(update: Update, context: ContextTypes.DEFAULT_TYPE, is_admin=False):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    # –û—á–∏—â–∞–µ–º user_data –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    context.user_data.clear()
    context.user_data['is_admin_manual'] = is_admin
    
    keyboard = [
        [InlineKeyboardButton("üíá‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", callback_data="service_–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞")],
        [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", callback_data="service_–ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if is_admin:
        text = "üìù *–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é*\n\n‚úÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"
    else:
        text = "‚úÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    query = update.callback_query
    service = query.data.split("_")[1]
    context.user_data['service'] = service
    
    keyboard = []
    today = get_local_time().date()
    current_time = get_local_time().time()
    
    # –ü–û–ö–ê–ó–´–í–ê–ï–ú 7 –†–ê–ë–û–ß–ò–• –î–ù–ï–ô –í–ü–ï–†–ï–î –° –£–ß–ï–¢–û–ú –¢–ï–ö–£–©–ï–ì–û –í–†–ï–ú–ï–ù–ò
    days_shown = 0
    i = 0
    
    while days_shown < 7 and i < 30:  # –ú–∞–∫—Å–∏–º—É–º 30 –¥–Ω–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        date = today + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        display_date = date.strftime("%d.%m.%Y")
        weekday = config.WEEKDAYS[date.weekday()]
        
        schedule = db.get_work_schedule(date.weekday())
        if schedule and schedule[0][4]:  # –ï—Å–ª–∏ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (is_working)
            start_time, end_time = schedule[0][2], schedule[0][3]  # start_time –∏ end_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            if is_date_available(date, current_time, start_time, end_time, i):
                keyboard.append([InlineKeyboardButton(
                    f"{weekday} {display_date}", 
                    callback_data=f"date_{date_str}"
                )])
                days_shown += 1
        
        i += 1
    
    if not keyboard:
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π üòî", reply_markup=reply_markup)
        return
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="make_appointment")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    is_admin_manual = context.user_data.get('is_admin_manual', False)
    if is_admin_manual:
        text = f"üìù *–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é*\n\nüíá –£—Å–ª—É–≥–∞: *{service}*\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
    else:
        text = f"üíá –£—Å–ª—É–≥–∞: *{service}*\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

def is_date_available(date, current_time, start_time, end_time, days_ahead):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–∞—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è
    if days_ahead == 0:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        start_dt = datetime.strptime(start_time, "%H:%M").time()
        end_dt = datetime.strptime(end_time, "%H:%M").time()
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        if current_time >= end_dt:
            return False
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ (–∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è)
        last_slot_time = (datetime.strptime(end_time, "%H:%M") - timedelta(minutes=30)).time()
        if current_time >= last_slot_time:
            return False
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
        # –Ω–æ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ –≤ filter_available_slots
        if current_time >= start_dt:
            return True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É, –Ω–æ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã
    
    return True

async def date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ service –≤ user_data
    if 'service' not in context.user_data:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        return
    
    date = query.data.split("_")[1]
    context.user_data['date'] = date
    
    available_slots = db.get_available_slots(date)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
    today = get_local_time().date()
    selected_date = datetime.strptime(date, "%Y-%m-%d").date()
    current_time = get_local_time().time()
    
    if selected_date == today:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        weekday = selected_date.weekday()
        schedule = db.get_work_schedule(weekday)
        if schedule and schedule[0][4]:  # is_working
            start_time, end_time = schedule[0][2], schedule[0][3]  # start_time –∏ end_time
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏
            available_slots = filter_available_slots(available_slots, current_time, start_time, end_time)
    
    if not available_slots:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π service –∏–∑ user_data
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{context.user_data['service']}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç üòî", reply_markup=reply_markup)
        return
    
    keyboard = []
    for slot in available_slots:
        keyboard.append([InlineKeyboardButton(slot, callback_data=f"time_{slot}")])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π service –∏–∑ user_data
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{context.user_data['service']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
    
    is_admin_manual = context.user_data.get('is_admin_manual', False)
    if is_admin_manual:
        text = f"üìù *–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é*\n\nüíá –£—Å–ª—É–≥–∞: *{context.user_data['service']}*\n\nüìÖ –î–∞—Ç–∞: *{display_date}*\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
    else:
        text = f"üìÖ –î–∞—Ç–∞: *{display_date}*\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

def filter_available_slots(slots, current_time, start_time, end_time):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    filtered_slots = []
    
    for slot in slots:
        slot_time = datetime.strptime(slot, "%H:%M").time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª
        if slot_time > current_time:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            start_dt = datetime.strptime(start_time, "%H:%M").time()
            end_dt = datetime.strptime(end_time, "%H:%M").time()
            
            if start_dt <= slot_time < end_dt:
                filtered_slots.append(slot)
    
    return filtered_slots

async def time_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    query = update.callback_query
    time = query.data.split("_")[1]
    context.user_data['time'] = time
    context.user_data['awaiting_phone'] = True
    
    is_admin_manual = context.user_data.get('is_admin_manual', False)
    
    if is_admin_manual:
        text = (
            "üìù *–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é*\n\n"
            "üìû *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:*\n\n"
            "*–§–æ—Ä–º–∞—Ç:* +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n"
            "*–ü—Ä–∏–º–µ—Ä:* +79123456789 –∏–ª–∏ 89123456789\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:"
        )
    else:
        text = (
            "üìû *–î–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
            "*–§–æ—Ä–º–∞—Ç:* +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n"
            "*–ü—Ä–∏–º–µ—Ä:* +79123456789 –∏–ª–∏ 89123456789\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:"
        )
    
    phone_keyboard = get_phone_keyboard()
    
    await query.message.reply_text(
        text,
        parse_mode='Markdown',
        reply_markup=phone_keyboard
    )
    
    return PHONE

async def date_selected_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ù–∞–∑–∞–¥' –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    context.user_data['awaiting_phone'] = False
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    date = context.user_data['date']
    available_slots = db.get_available_slots(date)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
    today = get_local_time().date()
    selected_date = datetime.strptime(date, "%Y-%m-%d").date()
    current_time = get_local_time().time()
    
    if selected_date == today:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        weekday = selected_date.weekday()
        schedule = db.get_work_schedule(weekday)
        if schedule and schedule[0][4]:  # is_working
            start_time, end_time = schedule[0][2], schedule[0][3]  # start_time –∏ end_time
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏
            available_slots = filter_available_slots(available_slots, current_time, start_time, end_time)
    
    keyboard = []
    for slot in available_slots:
        keyboard.append([InlineKeyboardButton(slot, callback_data=f"time_{slot}")])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π service –∏–∑ user_data
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{context.user_data['service']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
    
    is_admin_manual = context.user_data.get('is_admin_manual', False)
    if is_admin_manual:
        text = f"üìù *–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é*\n\nüíá –£—Å–ª—É–≥–∞: *{context.user_data['service']}*\n\nüìÖ –î–∞—Ç–∞: *{display_date}*\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
    else:
        text = f"üìÖ –î–∞—Ç–∞: *{display_date}*\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
    
    await update.message.reply_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    context.user_data['awaiting_phone'] = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–ª —Ç–µ–∫—Å—Ç
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not is_valid_phone(phone):
        phone_keyboard = get_phone_keyboard()
        
        is_admin_manual = context.user_data.get('is_admin_manual', False)
        if is_admin_manual:
            text = (
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                "üìû *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:*\n\n"
                "*–§–æ—Ä–º–∞—Ç:* +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n"
                "*–ü—Ä–∏–º–µ—Ä:* +79123456789 –∏–ª–∏ 89123456789\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:"
            )
        else:
            text = (
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                "üìû *–î–ª—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
                "*–§–æ—Ä–º–∞—Ç:* +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n"
                "*–ü—Ä–∏–º–µ—Ä:* +79123456789 –∏–ª–∏ 89123456789\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:"
            )
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=phone_keyboard
        )
        return PHONE
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    normalized_phone = normalize_phone(phone)
    context.user_data['phone'] = normalized_phone
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    user = update.effective_user
    user_data = context.user_data
    
    is_admin_manual = context.user_data.get('is_admin_manual', False)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π
        appointment_id = db.add_appointment(
            user_id=user.id if not is_admin_manual else 0,  # –î–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ user_id = 0
            user_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin_manual else user.full_name,
            user_username="admin_manual" if is_admin_manual else user.username,
            phone=normalized_phone,
            service=user_data['service'],
            date=user_data['date'],
            time=user_data['time']
        )
        
        display_date = datetime.strptime(user_data['date'], "%Y-%m-%d").strftime("%d.%m.%Y")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await send_new_appointment_notification(
            context, 
            user_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å)" if is_admin_manual else user.full_name,
            user_username="admin_manual" if is_admin_manual else user.username,
            phone=normalized_phone,
            service=user_data['service'],
            date=display_date,
            time=user_data['time'],
            appointment_id=appointment_id,
            is_manual=is_admin_manual
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
        await check_duplicate_appointments(context)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_keyboard = get_main_keyboard(user.id)
        
        if is_admin_manual:
            success_text = (
                f"‚úÖ *–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {config.BARBERSHOP_NAME}!*\n\n"
                f"üíá –£—Å–ª—É–≥–∞: {user_data['service']}\n"
                f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {user_data['time']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n\n"
                f"–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
        else:
            success_text = (
                f"‚úÖ *–ó–∞–ø–∏—Å—å –≤ {config.BARBERSHOP_NAME} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üíá –£—Å–ª—É–≥–∞: {user_data['service']}\n"
                f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {user_data['time']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {normalized_phone}\n\n"
                f"–ñ–¥—ë–º –≤–∞—Å –≤ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π! üèÉ‚Äç‚ôÇÔ∏è"
            )
        
        await update.message.reply_text(
            success_text,
            parse_mode='Markdown',
            reply_markup=main_keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        main_keyboard = get_main_keyboard(user.id)
        
        if "—É–∂–µ –∑–∞–Ω—è—Ç–æ" in str(e):
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=main_keyboard
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_keyboard
            )
    
    # –û—á–∏—â–∞–µ–º user_data –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    context.user_data.clear()
    return ConversationHandler.END

async def show_admin_manual_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É—é"""
    user_id = update.effective_user.id
    
    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å user_id = 0 (—Ä—É—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    all_appointments = db.get_all_appointments()
    manual_appointments = [appt for appt in all_appointments if appt[1] == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]
    
    if not manual_appointments:
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            query = update.callback_query
            await query.edit_message_text(
                "üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é",
                reply_markup=reply_markup
            )
        return
    
    text = "üìã *–ó–∞–ø–∏—Å–∏, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é:*\n\n"
    keyboard = []
    
    for appt in manual_appointments:
        appt_id, user_name, username, phone, service, date, time = appt
        display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        text += f"üÜî #{appt_id}\n"
        text += f"üíá {service}\n"
        text += f"üìÖ {display_date} ‚è∞ {time}\n"
        text += f"üìû {phone}\n"
        text += "‚îÄ" * 20 + "\n"
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{appt_id}", 
            callback_data=f"cancel_admin_{appt_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    appointments = db.get_user_appointments(user_id)
    
    if not appointments:
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            query = update.callback_query
            await query.edit_message_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π",
                reply_markup=reply_markup
            )
        return
    
    text = "üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n"
    keyboard = []
    
    for appt in appointments:
        appt_id, service, date, time = appt
        display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        text += f"üÜî #{appt_id}\n"
        text += f"üíá {service}\n"
        text += f"üìÖ {display_date} ‚è∞ {time}\n"
        text += "‚îÄ" * 20 + "\n"
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{appt_id}", 
            callback_data=f"cancel_{appt_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_cancel_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    user_id = update.effective_user.id
    
    if db.is_admin(user_id):
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ (–≤–∫–ª—é—á–∞—è —Ä—É—á–Ω—ã–µ)
        all_appointments = db.get_all_appointments()
        appointments = [appt for appt in all_appointments if appt[1] == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" or str(appt[0]) == str(user_id)]
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–ø–∏—Å–∏
        appointments = db.get_user_appointments(user_id)
    
    if not appointments:
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            query = update.callback_query
            await query.edit_message_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—è",
                reply_markup=reply_markup
            )
        return
    
    text = "‚ùå *–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n"
    keyboard = []
    
    for appt in appointments:
        if db.is_admin(user_id):
            appt_id, user_name, username, phone, service, date, time = appt
        else:
            appt_id, service, date, time = appt
            
        display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        
        if db.is_admin(user_id):
            button_text = f"‚ùå #{appt_id} - {display_date} {time}"
            callback_data = f"cancel_admin_{appt_id}"
        else:
            button_text = f"‚ùå #{appt_id} - {display_date} {time}"
            callback_data = f"cancel_{appt_id}"
            
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_all_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"""
    user_id = update.effective_user.id
    
    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    appointments = db.get_all_appointments()
    
    if not appointments:
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            query = update.callback_query
            await query.edit_message_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", reply_markup=reply_markup)
        else:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", reply_markup=reply_markup)
        return
    
    text = f"üëë *–í—Å–µ –∑–∞–ø–∏—Å–∏ {config.BARBERSHOP_NAME}:*\n\n"
    keyboard = []
    
    for appt in appointments:
        appt_id, user_name, username, phone, service, date, time = appt
        display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        username_display = f"(@{username})" if username and username != "admin_manual" else ""
        manual_indicator = " üìù" if user_name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" else ""
        text += f"üÜî #{appt_id}\n"
        text += f"üë§ {user_name}{manual_indicator} {username_display}\n"
        text += f"üìû {phone}\n"
        text += f"üíá {service}\n"
        text += f"üìÖ {display_date} ‚è∞ {time}\n"
        text += "‚îÄ" * 20 + "\n"
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{appt_id}", 
            callback_data=f"cancel_admin_{appt_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_today_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"""
    user_id = update.effective_user.id
    
    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    appointments = db.get_today_appointments()
    
    if not appointments:
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            query = update.callback_query
            await query.edit_message_text("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç", reply_markup=reply_markup)
        else:
            await update.message.reply_text("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç", reply_markup=reply_markup)
        return
    
    text = f"üìä *–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {config.BARBERSHOP_NAME}:*\n\n"
    
    for user_name, phone, service, time in appointments:
        manual_indicator = " üìù" if user_name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" else ""
        text += f"‚è∞ *{time}*\n"
        text += f"üë§ {user_name}{manual_indicator}\n"
        text += f"üìû {phone}\n"
        text += f"üíá {service}\n"
        text += "‚îÄ" * 20 + "\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def manage_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã"""
    user_id = update.effective_user.id
    
    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    schedule = db.get_week_schedule()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π
    text = "üóìÔ∏è *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã*\n\n"
    
    for weekday in range(7):
        day_data = schedule[weekday]
        day_name = config.WEEKDAYS[weekday]
        if day_data[4]:  # is_working
            text += f"‚úÖ {day_name}: {day_data[2]} - {day_data[3]}\n"  # start_time –∏ end_time
        else:
            text += f"‚ùå {day_name}: –≤—ã—Ö–æ–¥–Ω–æ–π\n"
    
    keyboard = []
    for weekday in range(7):
        day_name = config.WEEKDAYS[weekday]
        keyboard.append([InlineKeyboardButton(
            f"üìÖ {day_name}", 
            callback_data=f"schedule_day_{weekday}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)

# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò

async def manage_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    user_id = update.effective_user.id
    
    if not db.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_list")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add")],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_remove")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(
            "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

async def show_admin_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    query = update.callback_query
    admins = db.get_all_admins()
    
    if not admins:
        text = "üì≠ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç"
    else:
        text = "üëë *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n"
        for admin in admins:
            admin_id, username, first_name, last_name, added_at, added_by = admin
            display_name = f"{first_name} {last_name}".strip()
            if username and username != 'system':
                display_name += f" (@{username})"
            
            added_date = added_at.strftime("%d.%m.%Y") if isinstance(added_at, datetime) else added_at
            
            text += f"üÜî *ID:* {admin_id}\n"
            text += f"üë§ *–ò–º—è:* {display_name}\n"
            text += f"üìÖ *–î–æ–±–∞–≤–ª–µ–Ω:* {added_date}\n"
            text += "‚îÄ" * 20 + "\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def add_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    context.user_data['awaiting_admin_id'] = True
    
    await query.edit_message_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
        "*–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?*\n"
        "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot\n"
        "2. –ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç—É @userinfobot\n"
        "3. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "*–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:*",
        parse_mode='Markdown'
    )

async def remove_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    admins = db.get_all_admins()
    
    if len(admins) <= 1:
        await query.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    keyboard = []
    for admin in admins:
        admin_id, username, first_name, last_name, added_at, added_by = admin
        display_name = f"{first_name} {last_name}".strip()
        if username and username != 'system':
            display_name += f" (@{username})"
        
        keyboard.append([InlineKeyboardButton(
            f"‚ûñ {display_name} (ID: {admin_id})",
            callback_data=f"admin_remove_confirm_{admin_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def remove_admin_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    admin_id = int(query.data.split("_")[3])
    
    admin_info = db.get_admin_info(admin_id)
    if not admin_info:
        await query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    admin_id, username, first_name, last_name, added_at, added_by = admin_info
    display_name = f"{first_name} {last_name}".strip()
    if username and username != 'system':
        display_name += f" (@{username})"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_remove_final_{admin_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="manage_admins")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?\n\n"
        f"üë§ *–ò–º—è:* {display_name}\n"
        f"üÜî *ID:* {admin_id}\n\n"
        f"*–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def remove_admin_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    admin_id = int(query.data.split("_")[3])
    current_user_id = query.from_user.id
    
    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
    if admin_id == current_user_id:
        await query.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è", show_alert=True)
        return
    
    deleted = db.remove_admin(admin_id)
    
    if deleted:
        await query.edit_message_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É–¥–∞–ª–µ–Ω")
    else:
        await query.edit_message_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def handle_admin_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not context.user_data.get('awaiting_admin_id'):
        return
    
    context.user_data['awaiting_admin_id'] = False
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    try:
        new_admin_id = int(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if db.is_admin(new_admin_id):
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                reply_markup=get_main_keyboard(user_id)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            chat_member = await context.bot.get_chat_member(new_admin_id, new_admin_id)
            username = chat_member.user.username
            first_name = chat_member.user.first_name
            last_name = chat_member.user.last_name or ""
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            username = "unknown"
            first_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            last_name = f"ID {new_admin_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db.add_admin(new_admin_id, username, first_name, last_name, user_id)
        
        display_name = f"{first_name} {last_name}".strip()
        if username and username != 'unknown':
            display_name += f" (@{username})"
        
        await update.message.reply_text(
            f"‚úÖ *–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
            f"üë§ *–ò–º—è:* {display_name}\n"
            f"üÜî *ID:* {new_admin_id}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            parse_mode='Markdown',
            reply_markup=get_main_keyboard(user_id)
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_main_keyboard(user_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID.",
            reply_markup=get_main_keyboard(user_id)
        )

# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ù–§–õ–ò–ö–¢–û–í –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –ì–†–ê–§–ò–ö–ê

async def schedule_end_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    query = update.callback_query
    end_time = query.data.split("_")[2]
    start_time = context.user_data['schedule_start']
    weekday = context.user_data['schedule_weekday']
    day_name = config.WEEKDAYS[weekday]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    conflicting_appointments = db.get_conflicting_appointments(weekday, start_time, end_time, True)
    
    if conflicting_appointments:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data['pending_schedule'] = {
            'weekday': weekday,
            'start_time': start_time,
            'end_time': end_time,
            'is_working': True
        }
        context.user_data['conflicting_appointments'] = conflicting_appointments
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
        await show_schedule_conflict_warning(update, context, conflicting_appointments, day_name)
        return
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    db.set_work_schedule(weekday, start_time, end_time, True)
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä–∞—Ñ–∏–∫—É", callback_data="manage_schedule")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è *{day_name}* –æ–±–Ω–æ–≤–ª–µ–Ω!\nüïê *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {start_time} - {end_time}",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def schedule_off_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    query = update.callback_query
    weekday = int(query.data.split("_")[2])
    day_name = config.WEEKDAYS[weekday]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    conflicting_appointments = db.get_conflicting_appointments(weekday, "10:00", "20:00", False)
    
    if conflicting_appointments:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data['pending_schedule'] = {
            'weekday': weekday,
            'start_time': "10:00",
            'end_time': "20:00", 
            'is_working': False
        }
        context.user_data['conflicting_appointments'] = conflicting_appointments
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
        await show_schedule_conflict_warning(update, context, conflicting_appointments, day_name)
        return
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    db.set_work_schedule(weekday, "10:00", "20:00", False)
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä–∞—Ñ–∏–∫—É", callback_data="manage_schedule")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ *{day_name}* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å", 
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_schedule_conflict_warning(update: Update, context: ContextTypes.DEFAULT_TYPE, conflicting_appointments, day_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö"""
    query = update.callback_query
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–∞–º
    appointments_by_date = {}
    for appt in conflicting_appointments:
        appt_id, user_id, user_name, phone, service, date, time = appt
        if date not in appointments_by_date:
            appointments_by_date[date] = []
        appointments_by_date[date].append((time, user_name, service, appt_id))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    text = f"‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏!*\n\n"
    text += f"üìÖ *–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:* {day_name}\n"
    text += f"üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:* {len(conflicting_appointments)}\n\n"
    
    for date, appointments in appointments_by_date.items():
        display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        text += f"*{display_date}:*\n"
        for time, user_name, service, appt_id in appointments:
            text += f"‚Ä¢ {time} - {user_name} ({service}) #{appt_id}\n"
        text += "\n"
    
    text += "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="schedule_cancel_appointments")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞", callback_data="schedule_cancel_changes")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä–∞—Ñ–∏–∫—É", callback_data="manage_schedule")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_schedule_cancel_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    query = update.callback_query
    
    if 'pending_schedule' not in context.user_data or 'conflicting_appointments' not in context.user_data:
        await query.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö —É—Å—Ç–∞—Ä–µ–ª–∏", show_alert=True)
        return
    
    pending_schedule = context.user_data['pending_schedule']
    conflicting_appointments = context.user_data['conflicting_appointments']
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    appointment_ids = [appt[0] for appt in conflicting_appointments]
    
    # –ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏
    canceled_appointments = db.cancel_appointments_by_ids(appointment_ids)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    db.set_work_schedule(
        pending_schedule['weekday'],
        pending_schedule['start_time'],
        pending_schedule['end_time'],
        pending_schedule['is_working']
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º
    await notify_clients_about_schedule_change(context, canceled_appointments, pending_schedule)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('pending_schedule', None)
    context.user_data.pop('conflicting_appointments', None)
    
    day_name = config.WEEKDAYS[pending_schedule['weekday']]
    
    if pending_schedule['is_working']:
        schedule_info = f"{pending_schedule['start_time']} - {pending_schedule['end_time']}"
    else:
        schedule_info = "–≤—ã—Ö–æ–¥–Ω–æ–π"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä–∞—Ñ–∏–∫—É", callback_data="manage_schedule")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ *–ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n"
        f"üìÖ *{day_name}:* {schedule_info}\n"
        f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:* {len(canceled_appointments)}\n\n"
        f"–ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_schedule_cancel_changes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫–∞"""
    query = update.callback_query
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('pending_schedule', None)
    context.user_data.pop('conflicting_appointments', None)
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä–∞—Ñ–∏–∫—É", callback_data="manage_schedule")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ùå *–ò–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã*\n\n"
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def notify_clients_about_schedule_change(context: ContextTypes.DEFAULT_TYPE, canceled_appointments, new_schedule):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–µ–π –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    day_name = config.WEEKDAYS[new_schedule['weekday']]
    
    if new_schedule['is_working']:
        reason = f"–∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ {day_name} ({new_schedule['start_time']} - {new_schedule['end_time']})"
    else:
        reason = f"—Ç–æ–≥–æ, —á—Ç–æ {day_name} —Å—Ç–∞–ª –≤—ã—Ö–æ–¥–Ω—ã–º –¥–Ω–µ–º"
    
    for appointment in canceled_appointments:
        user_id, user_name, phone, service, date, time = appointment
        display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        
        text = (
            f"‚ùå *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –≤ {config.BARBERSHOP_NAME} –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
            f"üíá –£—Å–ª—É–≥–∞: {service}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
            f"*–ü—Ä–∏—á–∏–Ω–∞:* –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
            f"*–î–µ—Ç–∞–ª–∏:* {reason}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            f"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
        )
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {user_id}: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {e}")
    
    if query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "make_appointment":
        user_id = query.from_user.id
        is_admin = db.is_admin(user_id)
        await make_appointment_start(update, context, is_admin=is_admin)
    elif query.data.startswith("service_"):
        await service_selected(update, context)
    elif query.data.startswith("date_"):
        await date_selected(update, context)
    elif query.data.startswith("time_"):
        await time_selected(update, context)
    elif query.data.startswith("cancel_"):
        if query.data.startswith("cancel_admin_"):
            try:
                appointment_id = int(query.data.split("_")[2])
                await cancel_appointment(update, context, appointment_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø–∏—Å–∏")
        else:
            try:
                appointment_id = int(query.data.split("_")[1])
                await cancel_appointment(update, context, appointment_id)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø–∏—Å–∏")
    elif query.data.startswith("schedule_day_"):
        await schedule_day_selected(update, context)
    elif query.data.startswith("schedule_working_"):
        await schedule_working_selected(update, context)
    elif query.data.startswith("schedule_off_"):
        await schedule_off_selected(update, context)
    elif query.data.startswith("schedule_start_"):
        await schedule_start_selected(update, context)
    elif query.data.startswith("schedule_end_"):
        await schedule_end_selected(update, context)
    elif query.data == "manage_schedule":
        await manage_schedule(update, context)
    # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
    elif query.data == "manage_admins":
        await manage_admins(update, context)
    elif query.data == "admin_list":
        await show_admin_list(update, context)
    elif query.data == "admin_add":
        await add_admin_start(update, context)
    elif query.data == "admin_remove":
        await remove_admin_start(update, context)
    elif query.data.startswith("admin_remove_confirm_"):
        await remove_admin_confirm(update, context)
    elif query.data.startswith("admin_remove_final_"):
        await remove_admin_final(update, context)
    # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–û–ù–§–õ–ò–ö–¢–û–í –ì–†–ê–§–ò–ö–ê
    elif query.data == "schedule_cancel_appointments":
        await handle_schedule_cancel_appointments(update, context)
    elif query.data == "schedule_cancel_changes":
        await handle_schedule_cancel_changes(update, context)

async def schedule_day_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞"""
    query = update.callback_query
    weekday = int(query.data.split("_")[2])
    context.user_data['schedule_weekday'] = weekday
    
    current_schedule = db.get_work_schedule(weekday)
    day_name = config.WEEKDAYS[weekday]
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å", callback_data=f"schedule_working_{weekday}")],
        [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥–Ω–æ–π", callback_data=f"schedule_off_{weekday}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_schedule")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if current_schedule and len(current_schedule) > 0:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞)
        schedule_data = current_schedule[0]
        start_time, end_time, is_working = schedule_data[2], schedule_data[3], schedule_data[4]  # start_time, end_time, is_working
        status = "—Ä–∞–±–æ—á–∏–π" if is_working else "–≤—ã—Ö–æ–¥–Ω–æ–π"
        current_info = f"\n\n*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:* {status}"
        if is_working:
            current_info += f" ({start_time} - {end_time})"
    else:
        current_info = "\n\n*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã*"
    
    await query.edit_message_text(
        f"üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è *{day_name}*{current_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–Ω—è:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def schedule_working_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
    query = update.callback_query
    weekday = int(query.data.split("_")[2])
    context.user_data['schedule_weekday'] = weekday
    day_name = config.WEEKDAYS[weekday]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    keyboard = []
    times = [f"{hour:02d}:00" for hour in range(8, 18)]
    
    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–º
    row = []
    for i, time in enumerate(times):
        row.append(InlineKeyboardButton(time, callback_data=f"schedule_start_{time}"))
        if (i + 1) % 3 == 0 or i == len(times) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"schedule_day_{weekday}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è *–Ω–∞—á–∞–ª–∞* —Ä–∞–±–æ—Ç—ã –¥–ª—è {day_name}:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def schedule_start_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
    query = update.callback_query
    start_time = query.data.split("_")[2]
    context.user_data['schedule_start'] = start_time
    weekday = context.user_data['schedule_weekday']
    day_name = config.WEEKDAYS[weekday]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    keyboard = []
    start_hour = int(start_time.split(":")[0])
    times = [f"{hour:02d}:00" for hour in range(start_hour + 1, 21)]
    
    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–º
    row = []
    for i, time in enumerate(times):
        row.append(InlineKeyboardButton(time, callback_data=f"schedule_end_{time}"))
        if (i + 1) % 3 == 0 or i == len(times) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"schedule_working_{weekday}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è *–æ–∫–æ–Ω—á–∞–Ω–∏—è* —Ä–∞–±–æ—Ç—ã –¥–ª—è {day_name}:\n*–ù–∞—á–∞–ª–æ:* {start_time}",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def cancel_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE, appointment_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–º–µ–Ω—ã
    is_admin_cancel = query.data.startswith("cancel_admin_")
    
    if is_admin_cancel:
        if db.is_admin(user_id):
            appointment = db.cancel_appointment(appointment_id)
            if appointment:
                await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å #{appointment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                await notify_client_about_cancellation(context, appointment)
                await notify_admin_about_cancellation(context, appointment, user_id, is_admin=True)
            else:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏", show_alert=True)
    else:
        # –û—Ç–º–µ–Ω–∞ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        appointment = db.cancel_appointment(appointment_id, user_id)
        if appointment:
            await query.edit_message_text(f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å #{appointment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await notify_admin_about_cancellation(context, appointment, user_id, is_admin=False)
        else:
            await query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –æ—Ç–º–µ–Ω—ã", show_alert=True)

async def notify_client_about_cancellation(context: ContextTypes.DEFAULT_TYPE, appointment):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
    user_id, user_name, phone, service, date, time = appointment
    
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ä—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        return
        
    display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
    
    text = (
        f"‚ùå *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –≤ {config.BARBERSHOP_NAME} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n"
        f"üíá –£—Å–ª—É–≥–∞: {service}\n"
        f"üìÖ –î–∞—Ç–∞: {display_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
        "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
    )
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode='Markdown'
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {user_id}: {e}")

async def notify_admin_about_cancellation(context: ContextTypes.DEFAULT_TYPE, appointment, cancelled_by_user_id, is_admin=False):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
    user_id, user_name, phone, service, date, time = appointment
    display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
    
    if is_admin:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω ID –∫–ª–∏–µ–Ω—Ç–∞
        text = (
            f"‚ùå *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –≤ {config.BARBERSHOP_NAME}*\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üíá –£—Å–ª—É–≥–∞: {service}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}"
        )
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω ID –∫–ª–∏–µ–Ω—Ç–∞
        text = (
            f"‚ùå *–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –≤ {config.BARBERSHOP_NAME}*\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üíá –£—Å–ª—É–≥–∞: {service}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}"
        )
    
    notification_chats = db.get_notification_chats()
    for chat_id in notification_chats:
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –≤ —á–∞—Ç {chat_id}: {e}")

async def send_new_appointment_notification(context: ContextTypes.DEFAULT_TYPE, user_name, user_username, phone, service, date, time, appointment_id, is_manual=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    notification_chats = db.get_notification_chats()
    
    if not notification_chats:
        logger.info("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    
    manual_indicator = " üìù (—Ä—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å)" if is_manual else ""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    text = (
        f"üÜï *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*{manual_indicator}\n\n"
        f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {user_name}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"üíá *–£—Å–ª—É–≥–∞:* {service}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {time}\n"
        f"üÜî *ID –∑–∞–ø–∏—Å–∏:* #{appointment_id}"
    )
    
    for chat_id in notification_chats:
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def check_duplicate_appointments(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å—è—Ö"""
    duplicates = db.check_duplicate_appointments()
    
    if duplicates:
        for date, time, count in duplicates:
            appointments = db.get_appointments_by_datetime(date, time)
            
            display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
            
            text = (
                f"‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏!*\n\n"
                f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time}\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}\n\n"
                f"*–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n"
            )
            
            for appt_id, user_name, phone, service in appointments:
                text += f"‚Ä¢ {user_name} ({phone}) - {service} (#{appt_id})\n"
            
            text += f"\n*–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏*"
            
            await send_admin_notification(context, text)

async def send_admin_notification(context: ContextTypes.DEFAULT_TYPE, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    notification_chats = db.get_notification_chats()
    
    for chat_id in notification_chats:
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç {chat_id}: {e}")

def is_valid_phone(phone):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
    cleaned = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
    if cleaned.startswith('+7') and len(cleaned) == 12:
        return True
    elif cleaned.startswith('8') and len(cleaned) == 11:
        return True
    elif cleaned.startswith('7') and len(cleaned) == 11:
        return True
    elif len(cleaned) == 10:  # –ë–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
        return True
    
    return False

def normalize_phone(phone):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[^\d]', '', phone)
    
    if cleaned.startswith('8') and len(cleaned) == 11:
        return '+7' + cleaned[1:]
    elif cleaned.startswith('7') and len(cleaned) == 11:
        return '+' + cleaned
    elif len(cleaned) == 10:
        return '+7' + cleaned
    else:
        return phone

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏
    cleanup_result = db.cleanup_completed_appointments()
    
    if cleanup_result['total_deleted'] > 0:
        logger.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: —É–¥–∞–ª–µ–Ω–æ {cleanup_result['total_deleted']} –∑–∞–ø–∏—Å–µ–π")
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    appointments = db.get_appointments_for_reminder()
    
    if not appointments:
        logger.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return
    
    for appointment in appointments:
        appt_id, user_id, user_name, phone, service, date, time = appointment
        
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
            continue
            
        display_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d.%m.%Y")
        
        text = (
            f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –≤ {config.BARBERSHOP_NAME}*\n\n"
            f"üíá –£—Å–ª—É–≥–∞: {service}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
            "–ñ–¥—ë–º –≤–∞—Å –≤ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π! üèÉ‚Äç‚ôÇÔ∏è"
        )
        
        try:
            await context.bot.send_message(chat_id=user_id, text=text, parse_mode='Markdown')
            db.mark_reminder_sent(appt_id)
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_daily_schedule(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏
    cleanup_result = db.cleanup_completed_appointments()
    
    if cleanup_result['total_deleted'] > 0:
        logger.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: —É–¥–∞–ª–µ–Ω–æ {cleanup_result['total_deleted']} –∑–∞–ø–∏—Å–µ–π")
    
    appointments = db.get_today_appointments()
    notification_chats = db.get_notification_chats()
    
    if not notification_chats:
        logger.info("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return
    
    if not appointments:
        text = f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {config.BARBERSHOP_NAME} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç"
    else:
        text = f"üìÖ *–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {config.BARBERSHOP_NAME}:*\n\n"
        for user_name, phone, service, time in appointments:
            manual_indicator = " üìù" if user_name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" else ""
            text += f"‚è∞ *{time}* - {user_name}{manual_indicator} ({phone}): {service}\n"
    
    for chat_id in notification_chats:
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='Markdown'
            )
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def check_duplicates_daily(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏
    cleanup_result = db.cleanup_completed_appointments()
    
    if cleanup_result['total_deleted'] > 0:
        logger.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: —É–¥–∞–ª–µ–Ω–æ {cleanup_result['total_deleted']} –∑–∞–ø–∏—Å–µ–π")
    
    await check_duplicate_appointments(context)

async def periodic_cleanup(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)"""
    cleanup_result = db.cleanup_completed_appointments()
    
    if cleanup_result['total_deleted'] > 0:
        logger.info(f"–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {cleanup_result['total_deleted']} –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")

def setup_job_queue(application: Application):
    job_queue = application.job_queue
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    job_queue.run_daily(send_reminders, time=datetime.strptime("10:00", "%H:%M").time(), name="daily_reminders")
    job_queue.run_daily(send_daily_schedule, time=datetime.strptime("09:00", "%H:%M").time(), name="daily_schedule")
    job_queue.run_daily(check_duplicates_daily, time=datetime.strptime("08:00", "%H:%M").time(), name="check_duplicates")
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
    job_queue.run_repeating(periodic_cleanup, interval=1800, first=10, name="periodic_cleanup")

def main():
    application = Application.builder().token(config.BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ —Å –≤–≤–æ–¥–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(time_selected, pattern="^time_"),
        ],
        states={
            PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, phone_input),
                MessageHandler(filters.CONTACT, phone_input)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), date_selected_back),
            CommandHandler("start", start)
        ],
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Regex(r'^\d+$'), 
        handle_admin_id_input
    ))
    
    setup_job_queue(application)
    application.run_polling()

if __name__ == "__main__":
    main()